"""
Git related functions

TODO: Most of them doesn't have any appropriate error handling yet.
"""

# I could try https://gitpython.readthedocs.io/en/stable/ instead of pygit2
import pygit2
from pygit2 import Repository
from typing import Optional
from datetime import datetime

def cloneOrigin(url: str, path: str) -> Repository:
    repo = pygit2.clone_repository(url, path)

    return repo

def makeInstanceBranch(repo: Repository, name: str) -> None:
    # headCommit = repo.revparse_single('origin/master')
    headCommit = repo.revparse_single('HEAD')
    # branch = repo.creare_branch(name, headCommit, force = True)
    print('creating branch ' + name)
    branch = repo.branches.local.create(name, headCommit, force=True)
    print('checkouting to ' + name)
    repo.checkout(branch)

def getRepo(path: str) -> Repository:
    return Repository(path)

def initRepository(path: str) -> Repository:
    """
    Initialize the blank repository at the path

    Arguments:
        path {str} -- path of the new repository
    
    Returns:
        Repository -- created repository object
    """

    repo = pygit2.init_repository(path)
    
    return repo

def commitAll(repo: Repository, message: Optional[str] = None) -> None:
    """
    Creates commit with all changes in the working tree.
    There is a lack of eny error handling.
    
    Arguments:
        repo {Repository} -- repository object
    
    Keyword Arguments:
        message {Optional[str]} -- in None passed the message will be autogenerated: `Updated: datetime.now().strftime("%Y-%m-%d %H:%M:%S")` (default: {None})
    
    Returns:
        None -- No result returned.
    """

    if message is None:
        message = "Updated: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # checking if this is the root commit. Parent commit should be HEAD otherwise.
    if repo.head_is_unborn:
        parent = []
    else:
        parent = [repo.head.target]

    # todo: investigate this
    # Make sure it was written to disk before moving on.
    # test_fp.flush()
    # os.fsync(test_fp.fileno())
    # test_fp.close()
    repo.index.add_all()

    user = repo.default_signature
    tree = repo.index.write_tree()
    repo.create_commit('HEAD',
                        user,
                        user,
                        message,
                        tree,
                        parent)
    # Apparently the index needs to be written after a write tree to clean it up.
    # https://github.com/libgit2/pygit2/issues/370
    repo.index.write()

if __name__ == '__main__':
    # createOrigin(gameConfigPath, './tmpTest')
    pass
